APP_ID="com.rsk.rwallet.reactnative"
XCODEPROJ="./ios/rwallet.xcodeproj"
GRADLE_FILE="android/app/build.gradle"

platform :ios do
    lane :get_version do
        ios_get_version(
            xcodeproj: XCODEPROJ
        )
    end

    lane :set_version do |options|
        ios_set_version(
            version: options[:version],
            xcodeproj: XCODEPROJ
        )
    end

    lane :get_build do
        ios_get_build_number(
            xcodeproj: XCODEPROJ
        )
    end

    lane :set_build do |options|
        # ios_set_build_number will increment by 1 if there's no input options[:build]
        ios_set_build_number(
            build_number: options[:build],
            xcodeproj: XCODEPROJ
        )
    end

    desc 'Fetch certificates and provisioning profiles'
    lane :certificates do
        match(app_identifier: APP_ID, type: 'development', readonly: false)
    end

    desc 'Build the iOS application.'
    lane :build do
        update_project_team(path: XCODEPROJ)
        match
        gym(scheme: 'rwallet', project: XCODEPROJ)
    end

    desc 'Ship to Testflight.'
    lane :beta do |options|
        begin
            version = set_version(version: options[:version]),
            set_build(build: options[:build]),
            build
            pilot
            if !ENV['SLACK_URL'].empty?
                slack(message: "App #{get_version}(#{get_build}) was built and successfully uploaded to Beta :rocket:")
            end
        rescue => ex
            UI.error(ex)
        end
    end
end

platform :android do

    lane :get_version_code do
        android_get_version_code(
            gradle_file: GRADLE_FILE # optional
        )
    end

    lane :get_version_name do
        android_get_version_name(
            gradle_file: GRADLE_FILE # optional
        )
    end

    private_lane :set_version_code do |options|
        android_set_version_code(
            version_code: options[:code],
            gradle_file: GRADLE_FILE # optional
        )
    end

    private_lane :set_version_name do |options|
        android_set_version_name(
            version_name: options[:version],
            gradle_file: GRADLE_FILE # optional
        )
    end

    desc 'Build the Android application.'
    private_lane :build do
        gradle(task: 'clean', project_dir: 'android/')
        gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/', properties: {
            "android.injected.signing.store.file" => Dir.pwd + "/../" + ENV['ANDROID_SIGN_FILE'],
            "android.injected.signing.store.password" => ENV['ANDROID_SIGN_PASSWORD'],
            "android.injected.signing.key.alias" => ENV['ANDROID_SIGN_KEY_ALIAS'],
            "android.injected.signing.key.password" => ENV['ANDROID_SIGN_KEY_PASSWORD'],
        })
    end

    desc 'Only build the APK.'
    lane :build_apk do |options|
        set_version_name(version: options[:version])
        set_version_code(code: options[:code])
        build
        if !ENV['SLACK_URL'].empty?
            slack(message: "App #{get_version_name}(#{get_version_code}) was built and successfully")
        end
    end

    desc 'Ship to Play Store Beta.'
    lane :beta do |options|
        build
#        supply(track: 'beta', track_promote_to: 'beta')
        git_commit(path: GRADLE_FILE, message: 'Release ' + options[:version_name])
        push_to_git_remote
    end

    desc 'Ship to Play Store Alpha.'
    lane :alpha do
        build
#        supply(track: 'alpha', track_promote_to: 'alpha')
        git_commit(path: GRADLE_FILE, message: 'Release ' + options[:version_name])
        push_to_git_remote
    end

    desc 'Ship to Play Store Internal.'
    lane :internal do
        build
#        supply(track: 'internal', track_promote_to: 'internal')
        git_commit(path: GRADLE_FILE, message: 'Release ' + options[:version_name], allow_nothing_to_commit: true)
        push_to_git_remote
    end
end


error do |lane, exception|
    if !ENV['SLACK_URL'].empty?
        slack(message: "Error in #{lane}(#{exception})")
    end
end
